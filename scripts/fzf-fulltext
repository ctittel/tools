#!/usr/bin/python3
import os

def print_file_matches(query: list, file: str):
    assert isinstance(query, list)
    if query:
        regex_args = " ".join([f' -e {q} ' for q in query])
    else:
        regex_args = ' -e ".*" '
    file = f'"{file}"'
    cmd = f"rga --multiline --multiline-dotall --with-filename --pretty --context 5 {regex_args} {file}"
    os.system(cmd)


def file_search(query: list):
    if not query:
        query = ["."]
    search_files = "*"
    files = []
    for x in query:
        cmd = f"rga --multiline --multiline-dotall --files-with-matches {x} {search_files}"
        out = os.popen(cmd).read()
        files = [f for f in out.split("\n") if f]
        search_files = " ".join([f'"{f}"' for f in files])
    for f in files:
        print(f)


def main():
    cmd = f'export THIS_SCRIPT={__file__} && '
    cmd += '''
                fzf --sort --preview="[[ ! -z {} ]] && $THIS_SCRIPT --print {q} {}"
                    --bind "change:reload:$THIS_SCRIPT --search {q}"
                    --phony
                    --preview-window="70%:wrap"
            '''
    cmd = cmd.replace("\n", " ")

    file = os.popen(cmd).read()
    file = str(file).replace("\n", "")
    file = str(file).replace("\r", "")


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--no-multiline',
                        dest='multiline',
                        default=True,
                        action='store_false')
    parser.add_argument('--search',
                        dest="search_query",
                        default=None,
                        type=str)
    parser.add_argument('--print',
                        dest="print_query",
                        default=None,
                        type=str,
                        nargs=2)
    args = parser.parse_args()

    if args.print_query:
        assert args.search_query is None
        query, file = args.print_query
        print_file_matches(query.split(), file)
    elif args.search_query:
        assert args.print_query is None
        file_search(args.search_query.split())
    else:
        main()
    exit()
