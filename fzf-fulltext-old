#!/usr/bin/python3
import os

MULTILINE_ARGS = " --multiline --multiline-dotall "


def print_file_matches(query: list, file: str):
    assert isinstance(query, list)
    if not query:
        query = [".*"]
    regex_args = " ".join([f' -e "{q}" ' for q in query])
    file = f'"{file}"'

    cmd = f"rga --with-filename --pretty --context 5 {MULTILINE_ARGS} {regex_args} {file}"
    os.system(cmd)


def file_search(query: list):
    if not query:
        query = ["."]
    search_files = "*"
    files = []

    for x in query:
        cmd = f"rga {MULTILINE_ARGS} --files-with-matches {x} {search_files}"
        out = os.popen(cmd).read()
        files = [f for f in out.split("\n") if f]
        search_files = " ".join([f'"{f}"' for f in files])
    for f in files:
        print(f)

def main(multiselect=True):
    cmd = f'export THIS_SCRIPT="{__file__}" && '
    cmd += '''
                fzf --sort --preview="[[ ! -z {} ]] && $THIS_SCRIPT --print {q} {}"
                    --bind "change:reload:$THIS_SCRIPT --search {q}"
                    --phony
                    --preview-window="70%:wrap"
            '''
    if multiselect:
        cmd += " -m "
    cmd = cmd.replace("\n", " ")
    os.system(cmd)


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-m', '--multi',
                        default=False,
                        action='store_true',
                        help="Enable fzf multi-select with tab/shift-tab")
    parser.add_argument('--search',
                        dest="search_query",
                        default=None,
                        type=str,
                        nargs="+")
    parser.add_argument('--print',
                        dest="print_query",
                        default=None,
                        type=str,
                        nargs=2)
    args = parser.parse_args()

    if args.print_query:
        assert args.search_query is None
        query, file = args.print_query
        print_file_matches(query.split(), file)
    elif args.search_query:
        assert args.print_query is None
        query = args.search_query
        query = sum([x.split() for x in query], [])
        file_search(query)
    else:
        main(args.multi)
    exit()
